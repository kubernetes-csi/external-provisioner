// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/kubernetes-csi/external-provisioner/pkg/controller (interfaces: ProvisionerCSITranslator)

package controller

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	storagev1 "k8s.io/api/storage/v1"
)

// Mock of ProvisionerCSITranslator interface
type MockProvisionerCSITranslator struct {
	ctrl     *gomock.Controller
	recorder *_MockProvisionerCSITranslatorRecorder
}

// Recorder for MockProvisionerCSITranslator (not exported)
type _MockProvisionerCSITranslatorRecorder struct {
	mock *MockProvisionerCSITranslator
}

func NewMockProvisionerCSITranslator(ctrl *gomock.Controller) *MockProvisionerCSITranslator {
	mock := &MockProvisionerCSITranslator{ctrl: ctrl}
	mock.recorder = &_MockProvisionerCSITranslatorRecorder{mock}
	return mock
}

func (_m *MockProvisionerCSITranslator) EXPECT() *_MockProvisionerCSITranslatorRecorder {
	return _m.recorder
}

func (_m *MockProvisionerCSITranslator) GetInTreeNameFromCSIName(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetInTreeNameFromCSIName", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProvisionerCSITranslatorRecorder) GetInTreeNameFromCSIName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInTreeNameFromCSIName", arg0)
}

func (_m *MockProvisionerCSITranslator) IsMigratedCSIDriverByName(_param0 string) bool {
	ret := _m.ctrl.Call(_m, "IsMigratedCSIDriverByName", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockProvisionerCSITranslatorRecorder) IsMigratedCSIDriverByName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsMigratedCSIDriverByName", arg0)
}

func (_m *MockProvisionerCSITranslator) IsPVMigratable(_param0 *v1.PersistentVolume) bool {
	ret := _m.ctrl.Call(_m, "IsPVMigratable", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockProvisionerCSITranslatorRecorder) IsPVMigratable(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsPVMigratable", arg0)
}

func (_m *MockProvisionerCSITranslator) TranslateCSIPVToInTree(_param0 *v1.PersistentVolume) (*v1.PersistentVolume, error) {
	ret := _m.ctrl.Call(_m, "TranslateCSIPVToInTree", _param0)
	ret0, _ := ret[0].(*v1.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProvisionerCSITranslatorRecorder) TranslateCSIPVToInTree(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TranslateCSIPVToInTree", arg0)
}

func (_m *MockProvisionerCSITranslator) TranslateInTreePVToCSI(_param0 *v1.PersistentVolume) (*v1.PersistentVolume, error) {
	ret := _m.ctrl.Call(_m, "TranslateInTreePVToCSI", _param0)
	ret0, _ := ret[0].(*v1.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProvisionerCSITranslatorRecorder) TranslateInTreePVToCSI(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TranslateInTreePVToCSI", arg0)
}

func (_m *MockProvisionerCSITranslator) TranslateInTreeStorageClassToCSI(_param0 string, _param1 *storagev1.StorageClass) (*storagev1.StorageClass, error) {
	ret := _m.ctrl.Call(_m, "TranslateInTreeStorageClassToCSI", _param0, _param1)
	ret0, _ := ret[0].(*storagev1.StorageClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProvisionerCSITranslatorRecorder) TranslateInTreeStorageClassToCSI(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TranslateInTreeStorageClassToCSI", arg0, arg1)
}
